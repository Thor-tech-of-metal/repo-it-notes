name-space
==========
In scala a function itself can define a name-space. We can define a function B inside other functions A.

Blocks
======
*) A block is delimited by braces { ... }.

{ val x = f(3)
x * x
}

* It contains a sequence of definitions or expressions.
* This return expression can be preceded by auxiliary definitions.
* Blocks are expressions; a block may appear everywhere an expression can.
* The last element of a block is an expression that defines its value. 
  Given that the block can be an expression it can return a value.

Blocks and Visibility
=====================

* The definitions of a varible "x" inside a block shadow definitions of a similar variable "x" outside the block.
* The definitions inside a block are only visible from within the block.

*)	For example if x=4 it returns 16:

val x = 0
def f(y: Int) = y + 1
val result = {
val x = f(3)
x * x
} + x

--> here we have  two variable "x"

Program example
===============
*) given that "x" is vislible we can remove the "x" in the inner functions. 

def sqrt(x: Double) = {
	def sqrtIter(guess: Double): Double =
		if (isGoodEnough(guess)) guess
		else sqrtIter(improve(guess))

	def improve(guess: Double) =
		(guess + x / guess) / 2
	
	def isGoodEnough(guess: Double) =
		abs(square(guess) - x) < 0.001

sqrtIter(1.0)
}

Semicolons
==========
In Scala, semicolons at the end of lines are in most cases optional. The compiler recognize the end of an expression. 

But if there are more than one statements on a line, they need to be separated by semicolons: ";"
*)	For example:  val y = x + 1; y * y

Simicolons problems
===================
*)  For example:  
someLongExpression		--> is interpretated as -->	someLongExpression;
+ someOtherExpression								+ someOtherExpression

It should be written as:
(someLongExpression + someOtherExpression) or 

someLongExpression + 
someOtherExpression


 


 

