*) Explain what is Scala?
Scala is an object functional programming and scripting language.

*) Is Scala a Pure OOP Language? Is Java a Pure OOP Language?
    Yes, Scala is a Pure Object-Oriented Programming Language because in Scala, 
    everything is an Object and everything is a value. Functions are values and values are Objects.

    * Scala does not have primitive data types and also does not have static members.
    * Functions can be declared any where and used before attributes initialization without the need to be static

*) Can java run a compiled scala code?
 
You can run byte code generated by Scala if you include all necessary runtime libs for Scala (scala-library.jar, scala-swing.jar ...) in the classpath.
The scala command does this automatically, and supports Scala specific command line arguments.


*) What is the difference between Java’s “If..Else” and Scala’s “If..Else”?

SCALA: val year = if( count == 0) 2014 else 2015
JAVA: int year; if( count == 0){ year = 2014;} else{  year = 2015;}

*) What are the default imported package in scala ?

  java.lang package   scala package   scala.PreDef

*) What is the difference between var, value and lazy?
	* val will not let to change the reference to point to another reference. immutable.
	* var keywords are mutable and can be changed any number of times.
    * lazy Evaluation means evaluating program at run-time on-demand. 

*) What is the Relationship between equals method and == in Scala? 

   When we compare two instances with ==, Scala calls that object’s equals() method automatically.

*) Why scala prefers immutability?

    Immutability can help when dealing with equality issues or concurrent programs.



*) What is String Interpolation in Scala? 
scala> val title1 = "Play"
scala>val title2 = "Scala"
scala>val book1 = s"Book($title1 2 for $title2)"
book1: String = Book($title1 2 for $title2)

*) What is default access modifier in Scala? Does Scala have “public” keyword? 
“public” is the default access modifier.  Because of this default feature, Scala does not have “public” keyword.

*) What is Nothing in Scala? What is Nil in Scala? What is the relationship between Nothing and Nil in Scala?

* scala.Nothing
===============
* It is a subtype of every other type ins scala. It is at the bottom of everything.
* Nothing is a Type (final class).
* Nothing is never instantiated and is there for the benefit of the type system. 

Use Cases of Nothing In Scala:-

    * object None extends Option[Nothing]
    * list: List[Nothing] = List()--> list: List[Nothing] = List()
    * We can use Nothing as a return type of methods which never return.    
    * You only use Nothing if the method never returns: 
    def error ( msg : String) = throw new java.lang.Error("error") --> scala type checker shows: -->error ( msg : String) Nothing. 


scala.collection.immutable.Nil.type
===================================
*) Nil is an object, which is used to represent an empty list with Nil tail. It is defined in “scala.collection.immutable” package as shown below:
	 
   *head::Nil. A Nil tail
	
*) What is Null in Scala? What is null in Scala? What is difference between Null and null in Scala?

* The type of Null has a null.
* Null is a subtype of every class that inherits from Object; 
* It is incompatible with subtypes of AnyVal. AnyVal Always accept their default values.
* Null is a Type (final class) in “scala” package as “scala.Null”. 

scala> val myNullRef : Null = null
myNullRef: Null = null
val x = null // x: Null x has not a delacred type therefore it the type is Null.
val y: String = null // y: String. Y is type String wiht a Null value.
val y: List[Int]= null

val z: Int = null // error: type mismatch. it is incompatible with subtypes of AnyVal.

*) What is “Application” in Scala or What is Scala Application? What is “App” in Scala? What is the use of Scala’s App?

object MyApp {  def main( args: Array[String]) println("Hello World!") }

We have not defined main method because we have inherited from Scala App(Application):	

object MyApp extends App{    println("Hello World!") }

    
Collections
===========

*) What is a ‘Scala set’? What are methods through which operation sets are expressed?

-Scala set is a collection of elements of the same type.  
-Scala set does not contain any duplicate elements.  
-There are two kinds of sets, mutable and immutable.

*) What are the differences between Array and ArrayBuffer in Scala?

    -Array is fixed size array. We cannot change its size once its created.
    -ArrayBuffer is variable size array. It can increase or decrease it’s size dynamically.
    
*) Difference between Array and List in Scala?

    -Arrays are always Mutable where as List is always Immutable.
    -Once created, We can change Array values where as we cannot change List Object.
    -Arrays are fixed-size data structures.
    -List’s size is automatically increased or decreased based on it’s operations we perform on it.  
    -Arrays are Invariants where as Lists are Covariants.

*) What is Range in Scala? How to create a Range in Scala?

    Range is a Lazy Collection in Scala. Range is a class available in ‘scala’ package like ‘scala.Range’. 

*) What is the use of ‘yield’ keyword in Scala’s for-comprehension construct?

    ‘for/yield’ is used to iterate a collection of elements and generates new collection of same type. 
    It does not change the original collection.  

    
Objects
=======

*) What is the super class of all classes in Scala?
In the same way in Scala, the super class of all classes or traits is “Any” class.

*) What is ‘scala trait’ in scala? 

-Classes, objects and traits can inherit from at most one class but many traits.
-A trait is declared like an abstract class.
-Traits resemble interfaces in Java, but are more powerful because they can contains fields and concrete methods. 
-Traits cannot have (value) parameters, only classes can. like class Rationals(Int:x, Int:y)


*) What is case class? What is case object? What are the Advantages of case class? 
    
-Scala Compiler adds toString, hashCode and equals methods and copy metohds.
-Scala Compiler adds companion object with apply and unapply methods that’s why we don’t need new keyword to create instances of a case class.
-We can use case classes in Pattern Matching.
-By default, Case class and Case Objects are Serializable.

*) What is apply method in Scala? What is unapply method in Scala? 
    
    They are important for patter matching 
    apply method: To compose or assemble an object from it’s components.
    unapply method: To decompose or dis-assemble an object into it’s components.

*) How does it work under-the-hood, when we create an instance of a Class without using ‘new’ keyword in Scala?
    
    internally it make a call to appropriate apply method available in Companion object. Here appropriate apply method means that matched with parameters.
    class Person private (name: String)
        object Person{  def apply(name: String) = new Person(name) }    


