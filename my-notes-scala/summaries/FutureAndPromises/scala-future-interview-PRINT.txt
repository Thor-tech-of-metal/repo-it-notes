In Scala, it’s said that a future returns “eventually”
======================================================

*)  A Future[T] is a container that runs a computation concurrently, and it will return (at some future time) either 
(a) a result of type T or (b) an exception.

*) Creating a Future is simple; you just pass it a block of code you want to run. 
This is the code that will be executed at some point in the future. 

*) Future starts the computation asynchronously and returns a Future[T] that will hold the result of the computation. 
This is a common way to define methods that return a future.

*) The future runs in a spepared thread.  The result of the computation becomes available once the future completes.

*) The ExecutionContext.Implicits.global import statement imports the “default global execution context.” 
You can think of an execution context as being a thread pool. This is a simple way to get access to a thread pool.

Callbacks
=========
*)  Callback methods are called asynchronously when a future completes.
*)  The callback methods are:  onComplete and (onSuccess, onFailure).

f.onComplete {
  case Success(value) => println(s"Got the callback, meaning = $value")
  case Failure(e) => e.printStackTrace
}

*) A callback method is executed by some thread, some time after the future is completed. 

*) onComplete (Try[T] => U) takes a callback function of type Try[T] => U.

*)  onComplete, onSuccess, and onFailure have the result type Unit, so they can’t be chained. This design was intentional, 
to avoid any suggestion that callbacks may be executed in a particular order.

*) A call back method cannot return a value. A callback cannot retuen enclosed method. The values of a callback are not accessable for the enclosed method.
All of that is becasue a callback is excuted in a seprared thread.

*) The Await.result method call declares that it will wait for up to one second for the Future to return. 
If the Future doesn’t return within that time, it throws a java.util.concurrent.TimeoutException.

Tips
====
*) Never debug the future its likely that you can get a promise or the result.  

*) A method that with to return the result of future can map it and return the enclosed value. 


Callback
=======
def widgetsForUser(user: UUID): Future[Option[UserWidgets]] = {  }

def createDefaultUser(user: UUID): Unit ={
  val future: Future[Option[UserWidgets]] = widgetsForUser(user)

  future.onComplete {
    case Success(result) => createWidgets(user,result)
    case Failure(e) => e.printStackTrace();
  }
}


Map
====
The important thing is to decompose the content inside the Future[T] . For example Either can be Left(e) or Right(result)

val result: Future[Either[FailResult, List[Note]]] =getNotes(UUID.fromString(attachedTo), limit, start, qS)

result map { 
  case Left(e) => InternalServerError(Json.toJson(e.toString))
  case Right(result) => Ok(Json.toJson(result))
}


Flat the future
================

*) Use map when processing the results of a single Future, 
*) Use flatMap when you’re nesting another Future in your callback. Future operation as input to another Future operation. 
In that case our result type will be a nested Future (e.g., Future[Future[Int]]). Fortunately, we can flatten Futures to eliminate that nesting.

def addTwo(n:Int):Future[Int] = Future { n + 2 }
def addTwoAndDouble(n:Int):Future[Int] = addTwo(n).map { x:Int => x*2 }

addTwoAndDouble(4).onComplete(x => println(x))
--> result Success(12)


def addTwoAddTwo(n:Int):Future[Int] = addTwo(n).flatMap { n2 => addTwo(n2) }
addTwoAddTwo(2).onComplete(x => println(x))
--> result Success(6)


Map recover
==========
The statement inside the map should throw an exception then .. you can use recover. Rule for mapping futures

def longRunningComputation(i: Int): Future[Int] = Future {
  Thread.sleep(2000)
  i + 1
}
resultFinals= longRunningComputation(10)

val resultFinals= future map {
  case a:Int => {
      if (a > 10)  s"this is the ${a}"
      else  1/0
    }
} recover{
  case e: ArithmeticException => Console.println(e.toString)
}

val resultFinal= future map { result =>
  if (result > 10)  s"this is the ${result}"
  else  1/0
} recover{
  case e: ArithmeticException => Console.println(e.toString)
}

