Java to study
=============


* Remove a optional using Map

final var idsOptional = Optional.of(Arrays.of("1","2"));
final var jurisdictions = idsOptional
                            .map(ids -> jurisdictionService.getAll(ids))
                            .orElseGet(jurisdictionService::getAll);


* optional  get  optional value or throw an error using orElseThrow 

val  caseType = definitionDataItem.getString(ColumnName.CASE_TYPE_ID);

val caseTypeEntityOptional = parseContext.getCaseTypes()
  .stream()
  .filter(caseTypeEntity -> caseTypeEntity.getReference().equals(caseType))
  .findAny();

 
////// code A
if (caseTypeEntityOptional.isPresent()) {
  CaseTypeLiteEntity caseTypeLiteEntity = toCaseTypeLiteEntity(caseTypeEntityOptional.get());
  categoriesEntity.setCaseType(caseTypeLiteEntity);
} else {
  throw new InvalidImportException();
}

///// code B that remplace A
val caseTypeLiteEntity  = toCaseTypeLiteEntity(caseTypeEntityOptional.orElseThrow(InvalidImportException::new));



* Java 11. isBlank() vs isEmpty()
```
public class Main 
{
    public static void main(String[] args) 
    {
        System.out.println( "ABC".isBlank() );      //false
        System.out.println( "  ".isBlank() );       //true
 
        System.out.println( "ABC".isEmpty() );      //false
        System.out.println( "  ".isEmpty() );       //false
    }
}
````

List 
=====

* Quick notation from Arrays
```
import java.util.Arrays;
Arrays.asList("serviceName")
```
